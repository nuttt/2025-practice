// This test file was generated by Gemini.

import { describe, it, expect } from 'vitest';
import { invertTree, TreeNode } from './226-invert-binary-tree.js';

// Helper function to create a tree from an array (level-order)
function arrayToTree(arr) {
  if (!arr || arr.length === 0) {
    return null;
  }
  const root = new TreeNode(arr[0]);
  const queue = [root];
  let i = 1;
  while (queue.length > 0 && i < arr.length) {
    const currentNode = queue.shift();
    if (arr[i] !== null && arr[i] !== undefined) {
      currentNode.left = new TreeNode(arr[i]);
      queue.push(currentNode.left);
    }
    i++;
    if (i < arr.length && arr[i] !== null && arr[i] !== undefined) {
      currentNode.right = new TreeNode(arr[i]);
      queue.push(currentNode.right);
    }
    i++;
  }
  return root;
}

// Helper function to convert a tree to an array (level-order)
function treeToArray(root) {
    if (!root) {
        return [];
    }
    const array = [];
    const queue = [root];
    while(queue.length > 0) {
        const node = queue.shift();
        array.push(node.val);
        if(node.left) {
            queue.push(node.left);
        }
        if(node.right) {
            queue.push(node.right);
        }
    }
    return array;
}

describe('invertTree', () => {
  it('should invert the tree for example 1: [4,2,7,1,3,6,9]', () => {
    const root = arrayToTree([4, 2, 7, 1, 3, 6, 9]);
    const inverted = invertTree(root);
    expect(treeToArray(inverted)).toEqual([4, 7, 2, 9, 6, 3, 1]);
  });

  it('should invert the tree for example 2: [2,1,3]', () => {
    const root = arrayToTree([2, 1, 3]);
    const inverted = invertTree(root);
    expect(treeToArray(inverted)).toEqual([2, 3, 1]);
  });

  it('should return an empty array for an empty input', () => {
    const root = arrayToTree([]);
    const inverted = invertTree(root);
    expect(treeToArray(inverted)).toEqual([]);
  });
});